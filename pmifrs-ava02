/*
Dupla:
    Bruno Nascimento
    Vinicius Tavares
*/
var array1 = [12, 34, 56, 12, 67]
var array2 = ['js', 'java', 'c#', 'python']

// Todas as funções devem ser implementadas sem efeitos colaterais, isto é,
// elas não devem modificar o array de entrada (não são in-place).

function indexOf(arr,element){
    for(let i=0;i<arr.length;i++){
        if(arr[i]===element){
            return i
        }
    }
    return -1
}


function first(arr,n=1) { 
    let result=[];
    if (arr.length>0){
        for (let i = 0; i < n; i++) {
            result.push(arr[i])
        }
    }
    if (n == 1) return arr[0];
    return result
}
function last(arr, n=1) { 
    let result = [];
    if (arr.length > 0) {
        for (let i = n-1; i < arr.length; i++) {
            result.push(arr[i])
        }
    }
    if (n == 1) return arr[arr.length - 1];
    return result
}
function tail(arr) {
    let result = [];
    for (let i = 1; i < arr.length; i++) {
        result.push(arr[i])
    }
    return result
}
function without(arr, n) { 
    let result = [];
    for (let i = 0; i < arr.length; i++) {
        if(arr[i] != n) result.push(arr[i])
    }
    return result
}
function union(...args) {
    let result = [];
    for (var arg of args) {
        for(let i = 0; i < arg.length; i++) {
            if(indexOf(result,arg[i]) === -1) result.push(arg[i])
        }
    }
    return result
}
function unique(arr) {
    let result=[]
    for(let x of arr){
        if (indexOf(result,x)===-1){
            result.push(x)
        }
    }
    return result
}
function intersection(arr1,arr2) { 
    let result=[]
    for(let value of arr1){
        if(indexOf(arr2,value)!==-1){
            if (indexOf(result, value) === -1){
                result.push(value)
            }
        }
    }
    return result
}
function difference(arr1,arr2) { 
    let result = []
    for (let value of arr1) {
        if (indexOf(arr2, value) === -1) {
            result.push(value)
        }
    }
    return result
}
function zip(...args) {
    let result = []
    let maior = 0
    let maiorIndice = 0
    for(let i = 0; i < args.length; i++) {
        if (args[i].length > maior) {
            maior = args[i].length
            maiorIndice = i;
        }
    }

    for(let i = 0; i < args[maiorIndice].length; i++) {
        let array = [];    
        for(c = 0; c < args.length; c++) {
            array.push(args[c][i]);
        }
        result.push(array);
    }

    return result
}
function compact(arr) {
    let result = []
    for (let i = 0; i < arr.length; i++) {
        if(arr[i] !== null && arr[i] !== undefined && !isNaN(arr[i])) result.push(arr[i]);
    }

    return result
}
function flatten(arr,depth=1,result=[]) {
    for(let value of arr){
        if (Array.isArray(value)&&depth>=1){
            flatten(value,depth-1,result)
        } else{
            result.push(value)
        }
    }
    return result
}
function equals(arr, arr2) {
    if(arr.length !== arr2.length) return false;
    for(let i =0; i < arr.length; i++) {
        if (Array.isArray(arr[i]) && Array.isArray(arr2[i])) {
            return equals(arr[i], arr2[i])
        }
        if(arr[i] !== arr2[i]) return false;
    }
    return true;
}

console.log(first(array1)) // 12
console.log(first(array1, 3)) // [12, 34, 56]
console.log(first([],3)) // []


console.log(last(array1)) // 67
console.log(last(array1, 3)) // [56, 12, 67]

console.log(tail(array1)) // [34, 56, 12, 67]
console.log(tail([])) // []

console.log(without(array1, 34)) // [12, 56, 12, 67]
console.log(without(array1, 12)) // [34, 56, 67]

console.log(union(array1, array2)) // [12, 34, 56, 67, 'js', 'java', 'c#', 'python']
console.log(union(array1, array2, [89, 34, 'ruby', 'js'])) // [12, 34, 56, 67, 'js', 'java', 'c#', 'python', 89, 'ruby']

console.log(unique(array1)) // [12, 34, 56, 67]
console.log(unique(['a', 'a', 'a'])) // ['a']
console.log(unique(['a', 'b', 'a', 'b'])) // ['a', 'b']

console.log(intersection(['a', 4, 'c', 8], [8, 'b', 'c', 34])) // ['c', 8]
console.log(intersection([8, 'a', 4, 'c', 8], [8, 'b', 'c', 34])) // [8, 'c']

console.log(difference(['a', 4, 'c', 8], [8, 'b', 'c', 34])) // ['a', 4]
console.log(difference([], array1)) // []
console.log(difference(array1, [])) // [12, 34, 56, 12, 67]
console.log(difference(array1, array2)) // [12, 34, 56, 12, 67]
console.log(difference(array1, [56, 67])) // [12, 34, 12]

console.log(zip([12, 45], [67, 90])) // [[12, 67], [45, 90]]
console.log(zip(array2, [67, 90, 52, 56])) // [['js', 67], ['java', 90], ['c#', 52], ['python', 56]]
console.log(zip(array2, [67, 90, 52, 56], ['brendan eich', 'james gosling', 'anders hejlsberg', 'guido van rossum']))
// [['js', 67, 'brendan eich'], ['java', 90, 'james gosling'], ['c#', 52, 'anders hejlsberg'], ['python', 56, 'guido van rossum']]
console.log(zip([12, 45, 89], [67, 90])) // [[12, 67], [45, 90], [89, undefined]]
console.log(zip([12, 45])) // [[12], [45]]

console.log(compact([45, 23])) // [45, 23]
console.log(compact([45, 23, null])) // [45, 23]
console.log(compact([NaN, 23, null, 12])) // [23, 12]
console.log(compact([NaN, 23, null, 12, undefined, 78])) // [23, 12, 78]
console.log(compact([NaN, 23, null, 12, undefined, 78, 0, false, ''])) // [23, 12, 78, 0, false, '']
console.log(compact(array1)) // [12, 34, 56, 12, 67]

var depth = 2 // profundidade
var nested = [34, 54, [45, 23, [78, 90, [65]]], 12]
console.log(flatten([34, 54, [45, 23], 12])) // [34, 54, 45, 23, 12]
console.log(flatten([34, 54, [45, 23], 12, [78, 90]])) // [34, 54, 45, 23, 12, 78, 90]
console.log(flatten([34, 54, [45, 23, [78, 90]], 12])) // [34, 54, 45, 23, [78, 90], 12]
console.log(flatten([34, 54, [45, 23, [78, 90]], 12], depth)) // [34, 54, 45, 23, 78, 90, 12]
console.log(flatten(nested, depth)) // [34, 54, 45, 23, 78, 90, [65], 12]
console.log(flatten(nested, 3)) // [34, 54, 45, 23, 78, 90, 65, 12]
console.log(flatten(array1)) // [12, 34, 56, 12, 67]

console.log(equals([1, 2, 3], [1, 2, 3])) // true
console.log(equals([1, 2, 3], [1, 3, 2])) // false
console.log(equals(array1, array2)) // false
console.log(equals([1, [2, 3], 4], [1, [2, 3], 4])) // true
console.log(equals([1, [2, 3], 4], [1, [3, 2], 4])) // false
console.log(equals(nested, nested)) // true
console.log(equals(nested, [34, 54, [45, 23, [78, 90, [65]]], 12])) // true
console.log(equals([34, 54, [45, 23, [78, 90, [65]]], 12], nested)) // true

console.log(array1) // [12, 34, 56, 12, 67]
console.log(array2) // ['js', 'java', 'c#', 'python']

